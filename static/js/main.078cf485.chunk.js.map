{"version":3,"sources":["Thread.js","Conversation.js","Reply.js","ThreadDetails.js","App.js","serviceWorker.js","index.js"],"names":["Thread","_ref","thread","react_default","a","createElement","ThreadTitle","to","concat","id","title","styled","Link","_templateObject","Conversation","state","threads","fetch","res","json","payload","data","children","map","this","setState","console","warn","_context","t0","ThreadList","src_Thread","key","PureComponent","div","Conversation_templateObject","Reply","reply","ReplyContainer","VoteCount","score","ReplyBody","body","ReplyAuthor","href","author","target","Reply_templateObject","span","_templateObject2","p","_templateObject3","_templateObject4","ThreadDetails","replies","props","match","params","threadInfo","filter","set","kind","info","threadTitle","repliesSet","_this$state","react","Title","src_Reply","Component","h1","ThreadDetails_templateObject","App","react_router_dom","Header","className","StyledLink","react_router","exact","path","component","header","App_templateObject","App_templateObject2","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.078cf485.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Thread = ({ thread }) => (\n  <ThreadTitle to={`${thread.id}`}>\n    {`${thread.title}`}\n  </ThreadTitle>\n)\n\nexport default Thread;\n\nThread.propTypes = {\n  thread: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired\n  }).isRequired\n};\n\nconst ThreadTitle = styled(Link)`\n  text-decoration: none;\n  color: white;\n  display: block;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 16px;\n  padding: 20px 0;\n  transition: all 0.2s;\n  \n  &:not(:last-of-type) {\n    border-bottom: 1px solid white;\n  }\n\n  &:hover,\n  &:focus {\n    color: #f1c40f;\n  }\n`;\n\n\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport Thread from './Thread';\n\nexport default class Conversation extends PureComponent {\n\n  state = {\n    threads: []\n  }\n\n  async componentDidMount() {\n    try {\n      const res = await fetch('https://www.reddit.com/r/AskReddit/top.json?sort=top&t=mont&limit=100')\n      const payload = await res.json();\n      const threads = payload.data.children.map(thread => {\n        return thread.data;\n      })\n      this.setState({\n        threads: threads\n      })\n    }\n    catch(error) {\n      console.warn(error);\n    }\n  }\n\n  render() {\n    return (\n      <ThreadList>\n        {this.state.threads.map((thread) => <Thread thread={thread} key={thread.id} /> )}\n      </ThreadList>\n    )\n  }\n}\n\nconst ThreadList = styled.div`\n`;\n","import React from 'react'\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Reply = ({reply}) => (\n  <ReplyContainer>\n    <VoteCount>Score: {`${reply.score}`}</VoteCount>\n    <ReplyBody>{`${reply.body}`}</ReplyBody>\n    <ReplyAuthor href={`https://www.reddit.com/u/${reply.author}`} target=\"_blank\">-u/{`${reply.author}`}</ReplyAuthor>\n  </ReplyContainer>\n)\n\nexport default Reply;\n\nconst ReplyContainer = styled.div`\n  border-top: 1px solid white;\n  padding: 20px 0;\n  position: relative;\n`;\n\nconst VoteCount = styled.span`\n  position: absolute;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 10px;\n  color: white;\n  right: 0;\n  bottom: 20px;\n  letter-spacing: 1px;\n`;\n\nconst ReplyBody = styled.p`\n  margin: 0 0 5px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst ReplyAuthor = styled.a`\n  text-decoration: none;\n  color: #f1c40f;\n  font-weight: bold;\n  text-transform: uppercase;\n  font-size: 10px;\n`;\n\nReply.propTypes = {\n  reply: PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    author: PropTypes.string.isRequired,\n  }).isRequired\n};","import React, { Component, Fragment } from 'react'\nimport Reply from './Reply';\nimport styled from 'styled-components';\n\nclass ThreadDetails extends Component {\n  state = {\n    title: '',\n    replies: []\n  }\n\n  async componentWillMount() {\n    try {\n      const res = await fetch(`https://www.reddit.com/r/AskReddit/comments/${this.props.match.params.id}.json`)\n      const payload = await res.json();\n      const threadInfo = payload.filter(set => set.data.children[0].kind === 't3').map(info => info.data.children)[0];\n      const threadTitle = threadInfo[0].data.title;\n      const repliesSet = payload.filter(set => set.data.children[0].kind !== 't3');\n      const replies = repliesSet.map(set => set.data.children)[0].map(reply => reply.data);\n      this.setState({\n        title: threadTitle,\n        replies: replies\n      })\n    }\n    catch(error) {\n      console.warn(error);\n    }\n  }\n\n  render() {\n    const { title, replies } = this.state;\n    return (\n      <Fragment>\n        <Title>{`${title}`}</Title>\n        {replies.map((reply) => <Reply reply={reply} key={reply.id} /> )}\n      </Fragment>\n    )\n  }\n}\n\nexport default ThreadDetails;\n\nconst Title = styled.h1`\n  color: white;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 28px;\n  letter-spacing: -1px;\n`;\n","import React from 'react';\nimport {\n  HashRouter,\n  Route,\n  Switch,\n  Link,\n} from 'react-router-dom';\nimport styled from 'styled-components';\nimport './App.css';\nimport Conversation from './Conversation';\nimport ThreadDetails from './ThreadDetails';\n\nconst App = () => (\n  <HashRouter>\n  <Header className=\"App-header\">\n    <StyledLink to=\"/\" title=\"Conversation Starter\">\n      Conversation Starter\n    </StyledLink>\n  </Header>\n  <div className=\"App\">\n    <Switch>\n      <Route exact path=\"/\" component={Conversation} />\n      <Route exact path=\"/:id\" component={ThreadDetails} />\n    </Switch>\n  </div>\n</HashRouter>\n);\n\nexport default App;\n\nconst Header = styled.header`\n  background-color: #282c34;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n`;\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  color: white;\n  text-transform: uppercase;\n  font-size: 1rem;\n  letter-spacing: 5px;\n  font-weight: bold;\n  padding: 15px;\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}